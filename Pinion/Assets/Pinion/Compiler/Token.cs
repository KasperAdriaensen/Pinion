using System.Collections.Generic;

namespace Pinion.Compiler
{
	public struct Token
	{
		public readonly string text;
		public int index;

		public Token(string text, int tokenIndex)
		{
			this.text = text;
			this.index = tokenIndex;
		}

		public static Token Invalid
		{
			get
			{
				return new Token(string.Empty, -1);
			}
		}

		public override string ToString()
		{
			return text;
		}

		public override bool Equals(object obj)
		{
			return obj is Token token &&
				   text == token.text &&
				   index == token.index;
		}

		// Honestly, VS code autogenerated and it seems plenty legit.
		public override int GetHashCode()
		{
			int hashCode = -612513895;
			hashCode = hashCode * -1521134295 + EqualityComparer<string>.Default.GetHashCode(text);
			hashCode = hashCode * -1521134295 + index.GetHashCode();
			return hashCode;
		}

		public static bool operator ==(Token a, string b) => a.text == b;
		public static bool operator !=(Token a, string b) => a.text != b;
		public static bool operator ==(string a, Token b) => a == b.text;
		public static bool operator !=(string a, Token b) => a != b.text;

		public static implicit operator string(Token t) => t.text;
	}
}
